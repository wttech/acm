# Task tool documentation:
# 1) Basics: https://taskfile.dev/usage
# 2) Naming conventions: https://taskfile.dev/styleguide

version: '3'

env:
  AEM_ENV: '{{.AEM_ENV | default "local"}}'
  AEM_INSTANCE_PROCESSING_MODE: auto
  AEM_OUTPUT_VALUE: NONE
  JAVA_HOME:
    sh: sh aemw vendor list --output-value javaHome

dotenv:
  - '.env'              # VCS-ignored, user-specific
  - '.env.{{.AEM_ENV}}' # VCS-ignored, env-specific
  - '{{.AEM_ENV}}.env'  # VCS-tracked, env-specific

tasks:
  init:
    desc: initialize project
    cmds:
      - sh aemw project init

  setup:
    desc: start and provision AEM instances
    cmds:
      - task: start
      - task: provision
      - task: check

  resetup:
    desc: destroy then setup again AEM instances
    cmds:
      - task: destroy
      - task: setup

  start:
    desc: start AEM instances
    aliases: [ up ]
    cmd: sh aemw instance launch

  stop:
    desc: stop AEM instances
    aliases: [ down ]
    cmd: sh aemw instance stop

  restart:
    desc: restart AEM instances
    cmds:
      - task: stop
      - task: start

  destroy:
    desc: destroy AEM instances
    prompt: This will permanently delete all configured AEM instances and their data. Continue?
    deps: [ stop ]
    cmd: sh aemw instance destroy

  status:
    desc: check status of AEM instances
    env:
      AEM_OUTPUT_VALUE: ALL
    cmd: sh aemw instance status

  tail:
    desc: tail logs of AEM instances
    cmd: tail -f aem/home/var/instance/*/crx-quickstart/logs/{stdout,error}.log

  tail:author:
    desc: tail logs of AEM author instance
    cmd: tail -f aem/home/var/instance/author/crx-quickstart/logs/{stdout,error}.log

  tail:publish:
    desc: tail logs of AEM publish instance
    cmd: tail -f aem/home/var/instance/publish/crx-quickstart/logs/{stdout,error}.log

  provision:
    desc: provision AEM instances by installing packages and applying configurations
    aliases: [ configure ]
    cmds:
      - task: provision:repl-agent-publish
      - task: provision:crx

  provision:repl-agent-publish:
    desc: configure replication agent on AEM author instance
    cmd: 'sh aemw repl agent setup -A --location "author" --name "publish" --input-string "{ enabled: true, transportUri: \"{{.AEM_PUBLISH_HTTP_URL}}/bin/receive?sling:authRequestLogin=1\", transportUser: \"{{.AEM_PUBLISH_USER}}\", transportPassword: \"{{.AEM_PUBLISH_PASSWORD}}\", userId: \"admin\" }"'

  provision:crx:
    desc: enable CRX/DE on AEM instances
    cmd: 'sh aemw osgi config save --pid "org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet" --input-string "alias: /crx/server"'

  check:
    deps: [ author:check, publish:check ]

  author:check:
    desc: check health of AEM author instance
    cmds:
      - curl -s -u "{{.AEM_AUTHOR_USER}}:{{.AEM_AUTHOR_PASSWORD}}" "{{.AEM_AUTHOR_HTTP_URL}}/libs/granite/core/content/login.html" | grep -q "QUICKSTART_HOMEPAGE"
      - curl -s -u "{{.AEM_AUTHOR_USER}}:{{.AEM_AUTHOR_PASSWORD}}" "{{.AEM_AUTHOR_HTTP_URL}}/etc/replication/agents.author/publish.test.html" | grep -q "Replication (TEST) of /content successful"

  publish:check:
    desc: check health of AEM publish instance
    cmd: curl -s -u "{{.AEM_PUBLISH_USER}}:{{.AEM_PUBLISH_PASSWORD}}" "{{.AEM_PUBLISH_HTTP_URL}}/libs/granite/core/content/login.html" | grep -q "QUICKSTART_HOMEPAGE"

  build:
    desc: build AEM package
    cmd: sh mvnw clean install

  build:version:
    desc: check build tool versions
    cmds:
      - echo "JAVA_HOME='${JAVA_HOME}'"
      - sh mvnw -version

  deploy:all:
    desc: deploy all AEM package to AEM instances
    cmd: sh aemw package deploy --file "all/target/acm.all-*.zip"

  deploy:min:
    desc: deploy minimal AEM package to AEM instances
    cmd: sh aemw package deploy --file "min/target/acm.min-*.zip"

  develop:all:
    desc: build & deploy all AEM package to instances
    deps: [ build ]
    cmds:
      - task: deploy:all

#  develop:min:
#    desc: build & deploy minimal AEM package to instances
#    deps: [ build ]
#    cmds:
#      #- sh aemw package deploy --url 'https://github.com/orbinson/aem-groovy-console/releases/download/19.0.5/aem-groovy-console-all-19.0.5.zip'
#      - task: deploy:min
#      - sh aemw package deploy --file 'ui.content/target/acm.ui.content-*.zip'

  develop:core:
    desc: build & deploy core OSGi bundle to instances
    cmds:
      - (cd core && sh ../mvnw clean package)
      - sh aemw osgi bundle install --file 'core/target/acm.core-*.jar'

  develop:content:
    desc: build & deploy content AEM package to instances
    cmds:
      - (cd ui.content && sh ../mvnw clean package)
      - sh aemw package deploy --file 'ui.content/target/acm.ui.content-*.zip'

  develop:content:example:
    desc: build & deploy example content AEM package to instances
    cmds:
      - (cd ui.content.example && sh ../mvnw clean package)
      - sh aemw package deploy --file 'ui.content.example/target/acm.ui.content.example-*.zip'

  develop:frontend:
    desc: build & deploy frontend to instances
    cmds:
      - (cd ui.frontend && npm install && npm run build)
      - sh aemw content push --dir 'ui.apps/src/main/content/jcr_root/apps/acm/spa'

  develop:frontend:dev:
    desc: build & deploy frontend to instances in development mode
    dir: ui.frontend
    cmds:
      - sh npmw install
      - sh npmw run dev

  test:core:queue-code:
    desc: queue code and await for execution
    dir: core/test
    cmds:
      - npm install
      - npm run queue-code

  test:core:queue-cancel:
    desc: queue code then cancel execution
    dir: core/test
    cmds:
      - npm install
      - npm run queue-cancel
