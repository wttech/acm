name: Test

on:
  workflow_dispatch:
    inputs:
      acm_version:
        description: 'ACM Version'
        required: false
        default: 'latest'
        type: string

jobs:
  e2e:
    name: 'E2E Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      AEM_OUTPUT_LOG_MODE: none
      FORCE_COLOR: 1
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup NodeJS Runtime
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
          cache-dependency-path: './test/e2e/package-lock.json'

      - name: Setup NodeJS Dependencies
        working-directory: ./test/e2e
        run: npm ci

      - name: Install Playwright Browsers
        working-directory: ./test/e2e
        run: npx playwright install --with-deps chromium

      - name: Setup AEM Compose
        run: |
          echo "AEM_PUBLISH_ACTIVE=false" >> .env

      - name: Setup AEM Instance
        run: |
          set -e
          echo "Preparing AEM instance"
          mkdir -p aem/home/lib
          aws s3 cp --no-progress --only-show-errors s3://${{ secrets.AWS_S3_BUCKET_NAME }}/aem/on-prem/cq-quickstart-6.5.0.jar aem/home/lib/cq-quickstart-6.5.0.jar
          aws s3 cp --no-progress --only-show-errors s3://${{ secrets.AWS_S3_BUCKET_NAME }}/aem/on-prem/license.properties aem/home/lib/license.properties
          echo "Prepared AEM instance"
          echo "Launching AEM instance"
          sh aemw instance launch
          echo "Launched AEM instance"

      - name: Get ACM Version
        id: acm_version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          INPUT_VERSION="${{ inputs.acm_version }}"
          if [ -z "$INPUT_VERSION" ] || [ "$INPUT_VERSION" = "latest" ]; then
            VERSION=$(gh release view --repo wttech/acm --json tagName --jq '.tagName')
          else
            VERSION="$INPUT_VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Deploy ACM Package
        run: |
          VERSION="${{ steps.acm_version.outputs.version }}"
          echo "Deploying ACM version $VERSION"
          sh aemw pkg deploy --url "https://github.com/wttech/acm/releases/download/$VERSION/acm.all-$VERSION.zip"
          echo "Deployed ACM version $VERSION"

      - name: Run Playwright Tests
        working-directory: ./test/e2e
        run: npx playwright test

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: ./test/e2e/playwright-report/
          retention-days: 30
