group: Repo
name: repo_demo
documentation: |
  Setup some repository resources to demonstrate the usage of the `repo` code variable.
  Creates a folder structure, a post, and updates properties of the created resources.
  Finally, it can clean up the created resources if requested. 
  Can be run in dry run mode, where no changes are committed to the repository, or in normal mode, where changes are committed.
  
  Documentation:
    - [Repo](https://github.com/wttech/acm/blob/main/core/src/main/java/dev/vml/es/acm/core/repo/Repo.java)
    - [RepoResource](https://github.com/wttech/acm/blob/main/core/src/main/java/dev/vml/es/acm/core/repo/RepoResource.java)
content: |
  void describeRun() {
    args.bool("dryRun") { value = true; switcher(); description = "Do not commit changes to the repository" }
    args.bool("clean") { value = true; switcher(); description = "Finally delete all created resources" }
  }
    
  boolean canRun() {
    return condition.idleSelf()
  }
    
  void doRun() {
    out.fromLogs()
  
    repo.dryRun(args.value("dryRun")) {
      println "Creating a folder structure in the temporary directory of the repository."
      def dataFolder = repo.get("/tmp/acm/demo/data").ensureFolder()
      for (int i = 0; i < 5; i++) {
        def child = dataFolder.child("child-\${i+1}")
        child.save(["foo": "bar"])
        child.updateProperty("foo") { v -> v.toUpperCase() }
      }
      println "Folder '${dataFolder.path}' has now ${dataFolder.descendants().count()} descendant(s)."
    
      println "Creating a post in the temporary directory of the repository."
      def postFolder = repo.get("/tmp/acm/demo/posts").ensureFolder()
      def post = postFolder.child("hello-world.yml")
      post.saveFile("application/x-yaml") { output ->
        formatter.yml.write(output, [
            title: "Hello World",
            description: "This is a sample post.",
            tags: ["sample", "post"]
        ])
      }
      println "Post '${post.path}' has been created at ${post.property("jcr:created", java.time.LocalDateTime)}"
    
      if (args.value("clean")) {
        dataFolder.delete()
        postFolder.delete()
      }
    }
  }